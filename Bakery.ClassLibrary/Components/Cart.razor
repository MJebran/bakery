@using Bakery.ClassLibrary.Services
@using Bakery.WebApp.Data
@using Bakery.WebApp.Authentication
@using Bakery.ClassLibrary.Logic;
@inherits CartBase
@inject IItemPurchaseService _itemPurchaseService
@inject ICustomItemService _customItemService
@inject ICustomeItemToppingService _customItemToppingService
@inject NavigationManager NavigationManager

@if (itemPurchaseToQuantity != null && itemPurchaseToQuantity.Count() > 0)
{
	<div class="item-itemcnt">
	@foreach (var itemToPurchase in itemPurchaseToQuantity)
		{
			<div class="item-cnt">
				<div class="item-img">
					<img
						src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{itemToPurchase.Key.ItempurchaseItem.Item.ItemName?.Replace(" ", "")}")" />
				</div>
				<div class="item-ttl">
					@itemToPurchase.Key.ItempurchaseItem.Item.ItemName
				</div>
				<div class="item-bar">
					<button class="item-btn" @onclick="() => DecreasingAmountItem(itemToPurchase.Key)">-</button>
					<div class="item-ct">@itemToPurchase.Value</div>
					<button class="item-btn" @onclick="() => IncreasingAmountItem(itemToPurchase.Key)">+</button>
				</div>
				<div class="item-rmv d-flex justify-content-center">
					<button class="d-flex justify-content-center" @onclick="() => RemoveFromCart(itemToPurchase.Key)">Remove</button>
				</div>
			</div>
		}
	</div>

	<div class="checkout-cnt">
		<div class="checkout-btn">
			<a href="/Checkout/@cartId" style="text-decoration: none" @onclick="async () => await UpdateQuantitiesAsync()">
			Check Out
			</a>
		</div>

		<div class="total-cnt">
			Total
			$@ComputeTotal()
		</div>
	</div>

}
else
{
	<div>You have no items in your Cart</div>
}