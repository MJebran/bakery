@using Bakery.ClassLibrary.Services
@using Bakery.ClassLibrary.Logic
@using Bakery.WebApp.Authentication
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop
@inherits CheckoutBase
@inject IPurchaseService _purchaseservice
@inject IEmailService _emailservice
@inject IBakeryAutheticationService _authenticationservice
@inject NavigationManager NavigationManager

@if (itempurchases != null)
{
    <div class="col-md-6 container-fluid text-center">
        <h4 class="mb-2">Payment Summary</h4>
        @if (itempurchases.Count() > 0)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Product</th>
                            <th>Quantity</th>
                            <th>Topping Name</th>
                            <th>Topping Quantity</th>
                            <th>Topping Unit Price</th>
                            <th>Topping Total</th>
                            <th>Base Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in itempurchases)
                        {
                            <tr>
                                <td>
                                    <img src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{item.ItempurchaseItem.Item.ItemName?.Replace(" ", "")}")"
                                        style="max-width: 100px; max-height: 100px;" />
                                </td>
                                <td>@item.ItempurchaseQuantity x @item.ItempurchaseItem.Item.ItemName</td>
                                <td>@item.ItempurchaseQuantity</td>
                                <td>
                                    @foreach (var customTopping in item.ItempurchaseItem.Customitemtoppings)
                                    {
                                        <div>
                                            <span>@customTopping.Topping.ToppingName</span>
                                        </div>
                                    }
                                </td>
                                <td>
                                    @foreach (var customTopping in item.ItempurchaseItem.Customitemtoppings)
                                    {
                                        <div>
                                            <span>@customTopping.CustomItemToppingQuantity</span>
                                        </div>
                                    }
                                </td>
                                <td>
                                    @foreach (var customTopping in item.ItempurchaseItem.Customitemtoppings)
                                    {
                                        <div>
                                            <span>@customTopping.Topping.ToppingPrice</span>
                                        </div>
                                    }
                                </td>

                                <td>
                                    @{
                                        decimal totalToppingsPrice = item.ItempurchaseItem.Customitemtoppings.Sum(customTopping =>
                                        customTopping.Topping.ToppingPrice * customTopping.CustomItemToppingQuantity) ?? 0;
                                    }
                                    @totalToppingsPrice.ToString()
                                </td>
                                <td>
                                    @{
                                        decimal basePrice = item.ItempurchaseItem.Item.ItemPrice ?? 0;
                                    }
                                    @basePrice.ToString()
                                </td>

                                <td>
                                    @{
                                        decimal totalPrice = basePrice + totalToppingsPrice;
                                    }
                                    @totalPrice.ToString()
                                </td>
                            </tr>
                        }
                        <tr>
                            <td>Taxes</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td>@PaymentWithOutTaxes.ToString()</td>
                        </tr>
                        <tr>
                            <td>Sub-Total</td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td>@TaxAmount.ToString()</td>
                        </tr>
                        <tr>
                            <td><b>Total</b></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td></td>
                            <td><b>@PaymentAmount.ToString()</b></td>
                        </tr>
                    </tbody>
                </table>

                <div class="row container-fluid text-center">
                <div class="col-md-6 container-fluid text-center" style="display:@DisplayButtons">
                        <h4 class="mb-2 container-fluid text-center">Payment Method</h4>
                        <div id="smart-button-container">
                            <input type="hidden" name="descriptionInput" id="description" @bind="PaymentDescription" />
                            <input name="amountInput" type="hidden" id="amount" @bind="PaymentAmount">
                            <div style="text-align: center; margin-top: 0.625rem;" id="paypal-button-container"></div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <p>You currently have no items in your shopping cart</p>
            }
    </div>
}

@code {
    [JSInvokable()]
    public static async Task ReceiveDataFromJS(DotNetObjectReference<CheckoutBase> objectReference)
    {
        await Task.CompletedTask;

        if (objectReference is not null)
        {
            objectReference.Value?.NavigationManager?.NavigateTo("/thankYou");
            objectReference.Value?.SendEmailAfterSuccesfulPurchase();
            objectReference.Value?.MarkCartAsCompletedPurchase();
        }
        else
        {
            throw new Exception("No object reference found");
        }
    }
}