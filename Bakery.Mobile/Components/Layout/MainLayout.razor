@using Bakery.Mobile.MauiAuth0
@using Bakery.WebApp.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject IBakeryAutheticationService _authenticationService
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="topnav">
            <a class="active" href="#home">Home</a>
            <a href="/menuContents">Menu</a>
            <a href="/about">About Us</a>
            <a href="/FAQ">FAQ</a>
            <a href="/CustomizeItem/1">Custome Item</a>
            <a href="/thankYou">Thank you</a>
            <AccessControl /> 
            <AuthorizeView>
                <Authorized>
                    Hello, @context.User.Identity.Name!
                    <a href="#" @onclick="Logout">Log out</a>
                </Authorized>
                <NotAuthorized>
                    <AccessControl /> 
                    <a href="#" @onclick="Login">Log in</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string Username = "Anonymous User";
    private string Picture = "";
    private string Email = "cakebakery@gmail.com";
    private string Name = "";
    private string Surname = "";


    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if(Username == string.Empty)
        {
            Username = state.User.Identity.Name?? string.Empty;
        }

        string[] name = Username.Split(' ');
        Name = name[0];
        Surname = name[1];

        Picture = state.User.Claims
                    .Where(c => c.Type.Equals("picture"))
                    .Select(c => c.Value)
                    .FirstOrDefault() ?? string.Empty;

        if (!await _authenticationService!.IsUserAuthenticatedAsync(Email))
        {
           //  Email = state.User.Claims.FirstOrDefault(x => x.Type.Contains("email"))?.Value ?? throw new Exception("missing on email");
           // if (Email != "unknown" && Email != "")
           // {
           //      await _authenticationService.RegisterUserAsync(Email, Name, Surname);
           // }
        }
        

    await base.OnInitializedAsync();
  }
    public async Task Login()
    {
        await ((Auth0AuthenticationStateProvider)AuthenticationStateProvider)
            .LogInAsync();
    }

    public void Logout()
    {
        ((Auth0AuthenticationStateProvider)AuthenticationStateProvider)
            .LogOut();
    }
}





