@using Bakery.ClassLibrary.Services
@using Bakery.WebApp.Data
@using Bakery.WebApp.Services
@inject IToppingService _toppingService
@inject IBlobStorageService _blobService
@rendermode InteractiveServer

<h3>Add a Topping</h3>

<EditForm Model="@toppingToAdd" OnValidSubmit="AddTopping" FormName=>
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>
            Topping Name:
            <InputText @bind-Value="toppingToAdd!.ToppingName" class="form-control"/>
            <ValidationMessage For="@(() => toppingToAdd!.ToppingName)" class="text-danger"/>
        </label>
    </div>
    <div class="form-group">
        <label>
            Topping Price:
            <InputNumber @bind-Value="toppingToAdd!.ToppingPrice" class="form-control"/>
            <ValidationMessage For="@(() => toppingToAdd!.ToppingPrice)" class="text-danger"/>          
        </label>
    </div>
    <div class="form-group">
        <label>
            Toppping Calories:
            <InputNumber @bind-Value="toppingToAdd!.ToppingCalories" class="form-control"/>
            <ValidationMessage For="@(() => toppingToAdd!.ToppingCalories)" class="text-danger"/>
        </label>
    </div>
    <div class="form-group">
        <label>
            Topping Weight:
            <InputNumber @bind-Value="toppingToAdd!.ToppingWeight" class="form-control"/>
            <ValidationMessage For="@(() => toppingToAdd!.ToppingWeight)" class="text-danger"/>
        </label>
    </div>
    <div class="form-group">
        <label>
            Topping Unit:
            <InputTextArea @bind-Value="toppingToAdd!.ToppingUnit" class="form-control"/>
            <ValidationMessage For="@(() => toppingToAdd!.ToppingUnit)" class="text-danger"/>
        </label>
    </div>
    <div class="form-group">
        <label>
            Topping File:
            <InputFile OnChange="@OnInputFileChange" single required class="form-control"/>
        </label>
    </div>
    <div>
        <button type="submit">Submit</button>
    </div>
</EditForm>

@code {
    public Topping? toppingToAdd {get; set;} = new();
    private List<IBrowserFile> loadedFiles = new();
    IReadOnlyList<IBrowserFile>? selectedFiles;
    private List<FileUploadViewModel> fileUploadViewModels = new();
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();

        this.StateHasChanged();
    }
    public async Task AddTopping()
    {
        if(toppingToAdd is not null)
        {
            await _toppingService.AddTopping(toppingToAdd);

            await OnUploadSubmit();
        }
    }
    private async Task OnUploadSubmit()
    {
        if(selectedFiles is not null)
        {
            foreach (var file in selectedFiles)
            {
                var trustedFileNameForFileStorage = toppingToAdd?.ToppingName??"".Replace(" ", "");
                var blobUrl = await _blobService.UploadFileToBlobAsync(trustedFileNameForFileStorage, file.ContentType, file.OpenReadStream(20971520));
                if (blobUrl != null)
                {
                    FileUploadViewModel fileUploadViewModel = new FileUploadViewModel()
                        {
                            FileName = trustedFileNameForFileStorage,
                            FileStorageUrl = blobUrl,
                            ContentType = file.ContentType,
                        };

                    fileUploadViewModels.Add(fileUploadViewModel);
                }
            }
        }
    }

}

