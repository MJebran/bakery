@page "/cart/{cartId}"
@using Bakery.ClassLibrary.Services
@using Bakery.WebApp.Data
@using Bakery.WebApp.Authentication
@inject IItemPurchaseService _itemPurchaseService;
@inject ICustomItemService _customItemService
@inject ICustomeItemToppingService _customItemToppingService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (itemPurchaseQuantity != null && itemPurchaseQuantity.Count() > 0)
{
	<div class="item-itemcnt">
	@foreach (var itemToPurchase in itemPurchaseQuantity)
		{
			<div class="item-cnt">
				<div class="item-img">
					<img
						src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{itemToPurchase.Key.ItempurchaseItem.Item.ItemName?.Replace(" ", "")}")" />
				</div>
				<div class="item-ttl">
					@itemToPurchase.Key.ItempurchaseItem.Item.ItemName
				</div>
				<div class="item-bar">
					<button class="item-btn" @onclick="() => DecreasingAmountItem(itemToPurchase.Key)">-</button>
					<div class="item-ct">@itemToPurchase.Value</div>
					<button class="item-btn" @onclick="() => IncreasingAmountItem(itemToPurchase.Key)">+</button>
				</div>
				<div class="item-rmv">
					<button @onclick="() => RemoveFromCart(itemToPurchase.Key)">Remove</button>
				</div>
			</div>
		}
	</div>

	<div class="checkout-cnt">
		<div class="checkout-btn">
			<a href="/Checkout/@cartId" style="text-decoration: none">
			Check Out
			</a>
		</div>

		<div class="total-cnt">
			Total
			$@ComputeTotal()
		</div>
	</div>

}
else
{
	<div>You have no items in your Cart</div>
}

@code {
	[Parameter]
	public string? cartId { get; set; }
	List<Itempurchase>? userPurchase { get; set; }
	Dictionary<Itempurchase, int>? itemPurchaseQuantity { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		var purchases = (await _itemPurchaseService.GetAllItempurchase()).ToList();
		userPurchase = purchases.Where(c => c.PurchaseId == Int32.Parse(cartId ?? "")).ToList();

		foreach (var purchaseItem in userPurchase)
		{
			itemPurchaseQuantity?.Add(purchaseItem, 1);
		}
	}

	private void DecreasingAmountItem(Itempurchase itempurchase)
	{
		if (itemPurchaseQuantity?[itempurchase] > 1)
		{
			itemPurchaseQuantity[itempurchase] -= 1;
		}
	}

	private void IncreasingAmountItem(Itempurchase itempurchase)
	{
		if (itemPurchaseQuantity is not null)
		{
			itemPurchaseQuantity[itempurchase] += 1;
		}
	}

	private async Task RemoveFromCart(Itempurchase itempurchase)
	{
		await _itemPurchaseService.DeleteItempurchase(itempurchase.ItempurchaseId);
		foreach (var customtopping in itempurchase.ItempurchaseItem.Customitemtoppings)
		{
			await _customItemToppingService.DeleteCustomeItemTopping(customtopping.CustomItemToppingId);
		}
		await _customItemService.DeleteCustomitem(itempurchase.ItempurchaseItem.CustomItemId);

		NavigationManager.NavigateTo($"/cart/{itempurchase.PurchaseId}", forceLoad: true);
	}

	private decimal ComputeTotal()
	{
		decimal total = 0;

		if (itemPurchaseQuantity is not null)
		{
			foreach (var item in itemPurchaseQuantity)
			{
				var pricePerItem = item.Key.ItempurchaseItem.Item.ItemPrice;
				foreach (var topping in item.Key.ItempurchaseItem.Customitemtoppings)
				{
					pricePerItem += topping.CustomItemToppingQuantity * topping.Topping.ToppingPrice;
				}
				pricePerItem *= item.Value;
				total += pricePerItem ?? 0m;
			}
		}

		return total;
	}

}