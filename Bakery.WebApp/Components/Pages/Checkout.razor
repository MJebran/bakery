@page "/Checkout/{purchaseId}"
@using Bakery.ClassLibrary.Services
@using Bakery.WebApp.Logic
@inherits CheckoutBase
@inject IJSRuntime Js
@inject IPurchaseService _purchaseservice
@rendermode InteractiveServer

<h3 class="mb-5">Checkout</h3>
<div class="row">
    <div class="col-md-6" style="display:@DisplayButtons">
        <h4 class="mb-2">Payment Method</h4>
        <div id="smart-button-container">
            <input type="hidden" name="descriptionInput" id="description" @bind="PaymentDescription" />
            <input name="amountInput" type="hidden" id="amount" @bind="PaymentAmount">
            <div style="text-align: center; margin-top: 0.625rem;" id="paypal-button-container"></div>
        </div>
    </div>
</div>

@if (itempurchases == null)
{
    <DisplaySpinner />
}
else
{
    <div class="col-md-6">
    <h4 class="mb-2">Payment Summary</h4>
    @if (itempurchases.Count() > 0)
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in itempurchases)
                    {
                        <tr>
                            <td>@item.ItempurchaseQuantity x @item.ItempurchaseItem.Item.ItemName</td>
                            <td>@item.ItempurchaseItem.Item.ItemPrice.ToString()</td>
                        </tr>
                    }
                    <tr>
                        <td><b>Total</b></td>
                        <td><b>@PaymentAmount.ToString("C")</b></td>
                    </tr>
                </tbody>
            </table>
        }
        else
        {
            <p>You currently have no items in your shopping cart</p>
        }
    </div>
}
@code {
    [Parameter]
    public string? purchaseId { get; set; }
    private IJSObjectReference? module;
    protected override async Task OnInitializedAsync()
    {
        PurchaseId = int.Parse(purchaseId ?? "0");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Js.InvokeVoidAsync("initialisePayPal");
        }
    }
}
