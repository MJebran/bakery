@page "/customizeItem/{baseItemId}"
@using Bakery.ClassLibrary.Services
@using Bakery.WebApp.Data
@using Bakery.WebApp.Services
@using Bakery.WebApp.Authentication
@inject IItemTypeService _itemservice
@inject IToppingService _toppingservice
@inject ICustomItemService _customItemService
@inject IPurchaseService _purchaseservice
@inject IItemPurchaseService _itemPurchaseService
@inject IBakeryAutheticationService _authenticationService
@inject ICustomeItemToppingService _customItemToppingService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer



<div class="background-page">
    <div class="bottom-back">
        <a href="/menuContents">
            <div class="back">Back</div>
        </a>
    </div>

    <div class="ImagineCustomer">
        @if (baseItem is not null)
        {
            <div class="imaginecontainer">
                <img src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{baseItem.ItemName?.Replace(" ", "")}")" />
            </div>
        }
    </div>

    <div class="size">
        <div class="myBtnContainer">
            <button class="btn" @onclick="() => FilterSelection('S')">
                S
                <div class="sizeButton S"></div>
            </button>
            <button class="btn" @onclick="() => FilterSelection('M')">
                M
                <div class="sizeButton M"></div>
            </button>
            <button class="btn" @onclick="() => FilterSelection('L')">
                L
                <div class="sizeButton L"></div>
            </button>
        </div>
    </div>



    <div class="description d-flex justify-content-center">
        <div class="descriptionBox">
            <div class="descriptionBoxPink">
                @if (baseItem is not null)
                {
                    @if (toppingToQuantity is not null)
                    {
                        @foreach (var toppingAndQuantity in toppingToQuantity)
                        {
                            <div class="ingredientContainer">
                                <div class="item-decrease">
                                    <button @onclick="() => DecreaseToppingAmount(toppingAndQuantity.Key)">-</button>
                                </div>
                                <div class="item-img">
                                    <img style="height:40px"
                                         src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{toppingAndQuantity.Key.ToppingName?.Replace(" ", "")}")" />
                                </div>
                                <div class="item-ttl">
                                    <div>@toppingAndQuantity.Key.ToppingName</div>
                                </div>
                                <div class="item-ctl">@toppingAndQuantity.Value</div>
                                <div class="item-increase">
                                    <button @onclick="() => IncreaseToppingAmount(toppingAndQuantity.Key)">+</button>
                                </div>
                            </div>
                        }
                            <button class="addCart" @onclick="async () => await AddToCart()"> Order Now </button>
                            <div class="priceCart">Total: @ComputeTotalPrice()</div>
                    }
                }
            </div>
        </div>
    </div>


</div>

<style>
    .background-page {
        background-image: linear-gradient(0deg, rgba(254.00000005960464, 206.0000029206276, 201.00000321865082, 1) 0%,rgba(255, 255, 255, 0) 100%);
        width: 100%;
        height: 100%;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        grid-template-rows: auto auto auto;
        gap: 10px;
    }


    .ImagineCustomer {
        display: flex;
        grid-column: 1 / span 2;
        grid-row: 2;
        justify-content: center;
        align-items: center;
    }

    .size {
        grid-column: 1 / span 2;
        grid-row: 3;
    }

    .bottom-back {
        grid-column: 1 / span 2;
        grid-row: 1;
        background-color: green;
    }

    .back {
        background-color: rgba(236, 158, 73, 1);
        width: 27px;
        height: 27px;
        position: absolute;
        left: 40px;
        top: 80px;
    }

    .imaginecontainer img {
        max-width: 100%;
        max-height: 100%;
        display: block;
    }

    .myBtnContainer {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .btn {
        box-shadow: 0px 5px 5px rgba(0, 0, 0, 0.25);
        background-color: rgba(221, 225, 236, 1);
        width: 78px;
        height: 68px;
    }

        .btn:hover {
            background-color: #ddd;
        }

    .description {
        grid-column: 1 / span 2;
        grid-row: 4;
        height: 500px;
        position: relative;
        display: grid;
        grid-template-columns: auto auto;
        grid-template-rows: auto;
        height: 250px;
        border: 100px;
    }


    .descriptionBox {
        box-shadow: 0px 0px 13.530839920043945px rgba(0, 0, 0, 0.25);
        background-color: rgba(254.00000005960464, 206.0000029206276, 201.00000321865082, 1);
        width: 65%;
        height: 450px;
        left: 0;
        top: 0;
        justify-content: center;
        align-items: center;
        border-top-left-radius: 13px;
        border-top-right-radius: 13px;
        border-bottom-left-radius: 13px;
        border-bottom-right-radius: 13px;
    }

    .descriptionBoxPink {
        background-color: grey;
        width: 65%;
        height: 450px;
        left: 0;
        top: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        border-top-left-radius: 13px;
        border-top-right-radius: 13px;
        border-bottom-left-radius: 13px;
        border-bottom-right-radius: 13px;
    }

    .ItemDescription {
        color: rgba(35.26172026991844, 35.26172026991844, 35.26172026991844, 1);
        width: 699px;
        height: 154px;
        left: 420px;
        top: 712px;
        text-align: left;
        font-size: 31px;
        letter-spacing: 0;
    }

    .back {
        box-shadow: 0px 5.133833885192871px 5.133833885192871px rgba(0, 0, 0, 0.25);
    }

    .ingredientContainer {
        display: flex;
        background-color: rgba(250.00000029802322, 232.00000137090683, 212.00000256299973, 1);
        align-items: center;
        justify-content: center;
        margin-bottom: 10px;
        height: 40px;
        border-radius: 5px;
        align-self: center;
        flex-wrap: wrap;
        flex-direction: column;
    }

    .item-decrease button,
    .item-increase button {
        background-color: transparent;
        color: rgba(236.00000113248825, 158.00000578165054, 73.00000324845314, 1);
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        display: block;
        flex-grow: 1;
    }

        .item-decrease button:hover,
        .item-increase button:hover {
            background-color: #C77F33;
        }

    .item-img img {
        height: 40px;
    }

    .item-ttl {
        font-family: 'Futura Bk BT';
        overflow: hidden;
    }

    .item-ctl {
        background-color: #FAE8D4;
        padding: 5px;
        border-radius: 5px;
        margin: 0 10px;
    }

    .item-increase button {
        color: rgba(236.00000113248825, 158.00000578165054, 73.00000324845314, 1);
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        border-radius: 5px;
    }

        .item-increase button:hover {
            background-color: #C77F33;
        }

    .item-rmv button {
        background-color: #EC9E49;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
    }

        .item-rmv button:hover {
            background-color: #C77F33;
        }

    .addCart {
        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
        background-color: rgba(236.00000113248825, 158.00000578165054, 73.00000324845314, 1);
        width: 167px;
        height: 54px;
        position: relative;
        left: -130px;
        top: 100px;
        border-radius: 15px;
    }

    .priceCart {
        background-color: rgba(255, 255, 255, 0.5400000214576721);
        width: 158.64999389648438px;
        height: 51.29999923706055px;
        position: relative;
        left: -50px;
        top: 100px;
        border-radius: 15px;
    }
</style>



@code {
    [Parameter]
    public string? baseItemId { get; set; }
    public User? user { get; set; }
    public Customitem userCustomItem { get; set; } = new();
    public Itemtype? baseItem { get; set; }
    public Purchase? userCart { get; set; }
    public string? ErrorMesage { get; set; } = null;
    Dictionary<Topping, int>? toppingToQuantity { get; set; }
    public char? sizeItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var items = (await _itemservice.GetAllItemtypes()).ToList<Itemtype>();

        var toppings = (await _toppingservice.GetAllToppings()).ToList<Topping>();

        user = _authenticationService.GetAuthenticatedUser();

        baseItem = items
        .Where(i => i.ItemTypeId == Int32.Parse(baseItemId ?? ""))
        .First<Itemtype>();

        userCustomItem = new Customitem()
            {
                ItemId = baseItem?.ItemTypeId ?? 0
            };

        toppingToQuantity = new();

        foreach (var topping in toppings)
        {
            toppingToQuantity?.Add(topping, 0);
        }
        sizeItem = 'S';
    }

    public void IncreaseToppingAmount(Topping topping)
    {
        if (toppingToQuantity is not null)
            toppingToQuantity[topping] += 1;
    }

    public void DecreaseToppingAmount(Topping topping)
    {
        if (toppingToQuantity?[topping] > 0)
        {
            toppingToQuantity[topping] -= 1;
        }
    }

    public decimal ComputeTotalPrice()
    {
        decimal total = 0;

        if (toppingToQuantity is not null)
        {
            foreach (var toppingAndQuantity in toppingToQuantity)
            {
                total += toppingAndQuantity.Key.ToppingPrice * toppingAndQuantity.Value ?? 0.0m;

                if (sizeItem == 'S')
                {
                    total *= 1;
                }
                else if (sizeItem == 'M')
                {
                    total *= 1.25m;
                }
                else if (sizeItem == 'L')
                {
                    total *= 1.50m;
                }
            }
        }

        total += baseItem?.ItemPrice ?? 0.0m;

        return total;
    }

    public async Task AddToCart()
    {
        if (!_authenticationService.UserExists())
        {
            ReturnErrorMessage();
            return;
        }
        var purchases = (await _purchaseservice.GetAllPurchase()).ToList<Purchase>();

        if (purchases.Count() > 0)
        {
            userCart = purchases
            .Where(p => p.PurchaseUserId == user?.UserId && p.Ispayed == false)
            .FirstOrDefault<Purchase>();
        }

        if (userCart is null)
        {
            await CreateCartForUser();
            await AddToCart();
            return;
        }

        await _customItemService.AddCustomitem(userCustomItem);

        await AddCustomItemToppings(userCustomItem);

        await _itemPurchaseService.AddItempurchase(new Itempurchase()
            {
                ItempurchaseQuantity = 1,
                PurchaseId = userCart?.PurchaseId ?? 0,
                ItempurchaseItemId = userCustomItem.CustomItemId
            });

        NavigationManager.NavigateTo($"/cart/{userCart.PurchaseId}");
    }

    public async Task CreateCartForUser()
    {
        await _purchaseservice.AddPurchase(new Purchase()
            {
                PurchaseUserId = user?.UserId ?? 0,
                Ispayed = false
            });
    }

    public async Task AddCustomItemToppings(Customitem baseCustomItem)
    {
        if (toppingToQuantity is not null)
        {
            foreach (var toppingAndQuantity in toppingToQuantity)
            {
                if (toppingAndQuantity.Value > 0)
                {
                    await _customItemToppingService.AddCustomeItemTopping(new Customitemtopping()
                        {
                            CustomItemId = baseCustomItem.CustomItemId,
                            ToppingId = toppingAndQuantity.Key.ToppingId,
                            CustomItemToppingQuantity = toppingAndQuantity.Value
                        });
                }
            }
        }
    }

    public char FilterSelection(char size)
    {
        sizeItem = size;
        return size;
    }
    public void ReturnErrorMessage()
    {
        ErrorMesage = "You're not logged in!";
    }
}
