@page "/customizeItem/{itemId}"
@using Bakery.ClassLibrary.Services
@using Bakery.WebApp.Data
@using Bakery.WebApp.Services
@using Bakery.WebApp.Authentication
@inject IItemTypeService _itemservice
@inject IToppingService _toppingservice
@inject ICustomItemService _customItemService
@inject IPurchaseService _purchaseservice
@inject IItemPurchaseService _itemPurchaseService
@inject IBakeryAutheticationService _authenticationService
@rendermode InteractiveServer

@if (baseItem is not null)
{
    <div>
    <diV>
        <img
            src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{baseItem.ItemName.Replace(" ", "")}")" />
    </diV>
    <div>

        @foreach (Topping topping in toppingsToDisplay)
            {
                <div>
                    <button @onclick="() => DecreaseToppingAmount(topping)">-</button>
                    <div>
                        <img style="height:40px"
                            src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{topping.ToppingName.Replace(" ", "")}")" />
                    </div>
                    <div>@topping.ToppingName</div>
                    <button @onclick="() => IncreaseToppingAmount(topping)">+</button>
                </div>
            }
            <button @onclick=AddToCart>Order Now</button>
            <div>Total: @ComputeTotalPrice()</div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? baseItemId { get; set; }
    public User? user { get; set; }
    public List<Customitem> userCustomItems { get; set; } = new();
    public List<Topping> toppingsToDisplay {get; set;} = new();
    public Itemtype? baseItem { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var items = (await _itemservice.GetAllItemtypes()).ToList<Itemtype>();
        baseItem = items
        .Where(i => i.ItemTypeId == Int32.Parse(baseItemId ?? ""))
        .First<Itemtype>();

        toppingsToDisplay = (await _toppingservice.GetAllToppings()).ToList<Topping>();

        var user = _authenticationService.GetAuthenticatedUser();

        foreach (var topping in toppingsToDisplay)
        {
            userCustomItems.Add(new Customitem()
                {
                    ItemId = baseItem.ItemTypeId,
                    ToppingId = topping.ToppingId,
                    CustomItemToppingQuantity = 0
                });
        }
    }

    public void IncreaseToppingAmount(Topping topping)
    {
        userCustomItems
        .Where(c => c.ToppingId == topping.ToppingId)
        .First<Customitem>().CustomItemToppingQuantity += 1;
    }

    public void DecreaseToppingAmount(Topping topping)
    {
        var customItemForTopping = userCustomItems.
        Where(c => c.ToppingId == topping.ToppingId)
        .First<Customitem>();

        if (customItemForTopping.CustomItemToppingQuantity > 0)
        {
            customItemForTopping.CustomItemToppingQuantity -= 1;
        }
    }

    public async Task<decimal> ComputeTotalPrice()
    {
        decimal total = 0;

        var toppings = (await _toppingservice.GetAllToppings()).ToList<Topping>();

        foreach (var customItem in userCustomItems)
        {
            total += (decimal)(toppings
            .Where(t => t.ToppingId == customItem.ToppingId)
            .FirstOrDefault<Topping>()
            ?.ToppingPrice ?? 0.0m);
        }

        total += (decimal)(userCustomItems
        .FirstOrDefault<Customitem>()
        ?.Item.ItemPrice ?? 0.0m);

        return total;
    }
    public async Task AddToCart()
    {
        var purchases = (await _purchaseservice.GetAllPurchase()).ToList<Purchase>();

        var userCart = purchases
        .Where(p => p.PurchaseUserId == user?.UserId && p.Ispayed == false)
        .First<Purchase>();

        if (userCart is null)
        {
            await CreateCartForUser();
            await AddToCart();
        }

        await AddCustomItems();

        await _itemPurchaseService.AddItempurchase(new Itempurchase(){
            ItempurchaseId = userCustomItems?.FirstOrDefault<Customitem>().CustomItemId ?? 0,
            ItempurchaseQuantity = 1,
            PurchaseId = userCart?.PurchaseId ?? 0
        });
    }

    public async Task CreateCartForUser()
    {
        await _purchaseservice.AddPurchase(new Purchase()
            {
                PurchaseUserId = user?.UserId ?? 0,
                Ispayed = false
            });
    }

    public async Task AddCustomItems()
    {
        foreach(var customItem in userCustomItems)
        {
            if(customItem.CustomItemToppingQuantity > 0)
            {
                await _customItemService.AddCustomitem(customItem);

            }
        }
    }
}
