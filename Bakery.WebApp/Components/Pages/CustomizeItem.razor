@page "/customizeItem/{baseItemId}"
@using Bakery.ClassLibrary.Services
@using Bakery.WebApp.Data
@using Bakery.WebApp.Services
@using Bakery.WebApp.Authentication
@inject IItemTypeService _itemservice
@inject IToppingService _toppingservice
@inject ICustomItemService _customItemService
@inject IPurchaseService _purchaseservice
@inject IItemPurchaseService _itemPurchaseService
@inject IBakeryAutheticationService _authenticationService
@inject ICustomeItemToppingService _customItemToppingService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (baseItem is not null)
{
    <div>
    <diV>
        <img
            src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{baseItem.ItemName?.Replace(" ", "")}")" />
    </diV>
    <div>
        @if (toppingToQuantity is not null)
            {
                @foreach (var toppingAndQuantity in toppingToQuantity)
                {
                    <div>
                        <button @onclick="() => DecreaseToppingAmount(toppingAndQuantity.Key)">-</button>
                        <div>
                            <img style="height:40px"
                                src="@($"https://kakeybakerystorage.blob.core.windows.net/itemcontainer/{toppingAndQuantity.Key.ToppingName?.Replace(" ", "")}")" />
                        </div>
                        <div>@toppingAndQuantity.Key.ToppingName</div>
                        <div>@toppingAndQuantity.Value</div>
                        <button @onclick="() => IncreaseToppingAmount(toppingAndQuantity.Key)">+</button>
                    </div>
                    <button @onclick="async () => await AddToCart()"> Order Now </button>
                    <div>Total: @ComputeTotalPrice()</div>
                }
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string? baseItemId { get; set; }
    public User? user { get; set; }
    public Customitem userCustomItem { get; set; } = new();
    public Itemtype? baseItem { get; set; }
    public Purchase? userCart { get; set; }
    Dictionary<Topping, int>? toppingToQuantity { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var items = (await _itemservice.GetAllItemtypes()).ToList<Itemtype>();

        var toppings = (await _toppingservice.GetAllToppings()).ToList<Topping>();

        user = _authenticationService.GetAuthenticatedUser();

        baseItem = items
        .Where(i => i.ItemTypeId == Int32.Parse(baseItemId ?? ""))
        .First<Itemtype>();

        userCustomItem = new Customitem()
            {
                ItemId = baseItem?.ItemTypeId ?? 0
            };

        toppingToQuantity = new();

        foreach (var topping in toppings)
        {
            toppingToQuantity?.Add(topping, 0);
        }
    }

    public void IncreaseToppingAmount(Topping topping)
    {
        if (toppingToQuantity is not null)
            toppingToQuantity[topping] += 1;
    }

    public void DecreaseToppingAmount(Topping topping)
    {
        if (toppingToQuantity?[topping] > 0)
        {
            toppingToQuantity[topping] -= 1;
        }
    }

    public decimal ComputeTotalPrice()
    {
        decimal total = 0;

        if (toppingToQuantity is not null)
        {
            foreach (var toppingAndQuantity in toppingToQuantity)
            {
                total += toppingAndQuantity.Key.ToppingPrice * toppingAndQuantity.Value ?? 0.0m;
            }
        }

        total += baseItem?.ItemPrice ?? 0.0m;

        return total;
    }

    public async Task AddToCart()
    {
        var purchases = (await _purchaseservice.GetAllPurchase()).ToList<Purchase>();

        if (purchases.Count() > 0)
        {
            userCart = purchases
            .Where(p => p.PurchaseUserId == user?.UserId && p.Ispayed == false)
            .FirstOrDefault<Purchase>();
        }

        if (userCart is null)
        {
            await CreateCartForUser();
            await AddToCart();
        }

        await _customItemService.AddCustomitem(userCustomItem);

        await AddCustomItemToppings(userCustomItem);

        await _itemPurchaseService.AddItempurchase(new Itempurchase()
            {
                ItempurchaseQuantity = 1,
                PurchaseId = userCart?.PurchaseId ?? 0,
                ItempurchaseItemId = userCustomItem.CustomItemId
            });

        NavigationManager.NavigateTo($"/cart/{userCart.PurchaseId}");
    }

    public async Task CreateCartForUser()
    {
        await _purchaseservice.AddPurchase(new Purchase()
            {
                PurchaseUserId = user?.UserId ?? 0,
                Ispayed = false
            });
    }

    public async Task AddCustomItemToppings(Customitem baseCustomItem)
    {
        if (toppingToQuantity is not null)
        {
            foreach (var toppingAndQuantity in toppingToQuantity)
            {
                if (toppingAndQuantity.Value > 0)
                {
                    await _customItemToppingService.AddCustomeItemTopping(new Customitemtopping()
                        {
                            CustomItemId = baseCustomItem.CustomItemId,
                            ToppingId = toppingAndQuantity.Key.ToppingId,
                            CustomItemToppingQuantity = toppingAndQuantity.Value
                        });
                }
            }
        }
    }
}
