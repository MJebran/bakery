@page "/menuContents"
@using Bakery.ClassLibrary.Services;
@using Bakery.WebApp.Data;
@using Bakery.WebApp.Services
@inject IItemTypeService _itemservice;
@inject ICategoryService _categoryservice;
@inject ISizeService _sizeservice;
@inject IBlobStorageService _blobService;
@rendermode InteractiveServer

<div class="Container">
    <div class="locationContainer">
        <div class="location"></div>
        <span class="locationText">Manti, Utah</span>
    </div>

    <div class="frame">
        Frame
    </div>

    <div class="searchBar">
        <div class="InputContainer">
            <input placeholder="Search.." id="input" class="input" name="text" type="text">
        </div>
    </div>


    <div class="categories">
        <!-- Control buttons -->
        <div id="myBtnContainer">
            <button class="btn btn-primary" @onclick="() => FilterSelection()">
                Show all
            </button>
            @foreach (var category in categories)
            {
                <button class="btn" @onclick="() => FilterSelection(category.CategoryName)">
                    @category.CategoryName
                    <div class="@category.CategoryName"></div>
                </button>
            }
            <!-- The filterable elements -->
        </div>
        <div class="container">
            @foreach (var item in filterItems)
            {
                <div class="filterDiv @item.CategoryId">
                    <div class="purpleFrameItem"></div>
                    <div class="ImageContainer"></div>
                    <span class="itemName">@item.ItemName</span>
                </div>
            }
        </div>
</div>
</div>




@code {
    List<Size> sizes = new();
    List<Category> categories = new();
    List<Itemtype> items = new();
    List<Itemtype> filterItems = new();
    protected override async Task OnInitializedAsync()
    {
        sizes = (await _sizeservice.GetAllSizes()).ToList<Size>();
        categories = (await _categoryservice.GetAllCategories()).ToList<Category>();
        items = (await _itemservice.GetAllItemtypes()).ToList<Itemtype>();
        FilterSelection();
    }

    private void FilterSelection(string category = "all")
    {
        if(category == "all")
        {
            filterItems = items;
        }
        else
        {
            filterItems = items.Where(item => item.Category.CategoryName == category).ToList();
        }
    }
}

<style>
    .Container {
        background-color: rgba(240, 240, 240, 1);
        width: 100%;
        height: 100%;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Columnas automáticas con un mínimo de 200px */
        grid-template-rows: auto auto auto; /* Filas automáticas */
        gap: 10px;
    }

    .locationContainer {
        grid-column: 1 / span 2; /* Ocupa dos columnas */
        grid-row: 1; /* Está en la primera fila */
    }

    .location {
        background-color: rgba(35, 35, 35, 1);
    }

    .locationText {
        color: rgba(35, 35, 35, 1);
        font-family: Futura Bk BT;
        font-size: 30px;
        text-align: left;
        padding-left: 10px;
    }

    .frame {
        grid-column: 1 / span 2; /* Ocupa dos columnas */
        grid-row: 2; /* Está en la segunda fila */
        background-color: rgba(250, 232, 212, 1);
        height: 200px;
    }

    .searchBar {
        grid-column: 1 / span 2; /* Ocupa dos columnas */
        grid-row: 3; /* Está en la tercera fila */
        display: flex;
        justify-content: center;
    }

    .InputContainer {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
    }

    .input {
        width: 100%;
        height: 40px;
        border: none;
        outline: none;
        padding-left: 15px;
        border-radius: 30px;
        font-size: 13.4px;
    }

    .categories {
        grid-column: 1 / span 2; /* Ocupa dos columnas */
        grid-row: 4; /* Está en la cuarta fila */
    }

    .itemtype{
        grid-column: 1 / span 2; /* Ocupa dos columnas */
        grid-row: 5; /* Está en la cuarta fila */
    }

    .container {
        width: 100%;
        height: 600px;
        overflow: hidden;
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
    }

    .filterDiv {
        background-color: rgba(255, 255, 255, 1);
        color: rgba(236, 158, 73, 1);
        width: 179px;
        height: 187px;
        text-align: center;
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
        border-bottom-left-radius: 20px;
        border-bottom-right-radius: 20px;
        margin: 2px;
        display: none;
        left: 1px;
        top: 48px;
        position: relative;
        display: block;
    }

    .purpleFrameItem {
        background-color: rgba(243.00000071525574, 228.0000016093254, 254.00000005960464, 1);
        width: 179px;
        height: 100.50806427001953px;
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
        position: absolute;
        top: 0;
        left: 0;
    }

    .itemName {
        color: rgba(35.26172026991844, 35.26172026991844, 35.26172026991844, 1);
        width: 142px;
        height: 17.564516067504883px;
        position: absolute;
        left: 10px;
        top: 157.10484313964844px;
        font-family: Futura Bk BT;
        text-align: left;
        font-size: 15px;
        letter-spacing: 0;
    }

    #myBtnContainer {
        display: flex;
        justify-content: center; /* Centrar horizontalmente los elementos */
        align-items: center; /* Centrar verticalmente los elementos */
    }

    .btn {
        border: none;
        outline: none;
        padding: 12px 16px;
        background-color: white;
        cursor: pointer;
        box-shadow: 0px 6px 6px rgba(0, 0, 0, 0.25);
        width: 97.5px;
        height: 154.5px;
        border-top-left-radius: 45px;
        border-top-right-radius: 45px;
        border-bottom-left-radius: 7.5px;
        border-bottom-right-radius: 45px;
        position: relative; /* Ensure the button is a positioned parent */
        overflow: hidden; /* Ensure the circle stays within the button */
    }
    .inner-circle-select{
        border-radius: 50%;
        background-color: rgba(250.00000029802322, 232.00000137090683, 212.00000256299973, 1);
        width: 79.5px;
        height: 79.5px;
        position: absolute;
        left: 9px; 
        top: 15px; 
        background-image: none;
        background-repeat: no-repeat;
        background-position: center;
    }
    .Cake {
        border-radius: 50%;
        background-color: rgba(250.00000029802322, 232.00000137090683, 212.00000256299973, 1);
        width: 79.5px;
        height: 79.5px;
        position: absolute;
        left: 9px; /* Adjust according to your preference */
        top: 15px; /* Adjust according to your preference */
        background-image: url(https://kakeybakerystorage.blob.core.windows.net/itemcontainer/cake.png);
        background-repeat: no-repeat;
        background-position: center;
    }

    .Cupcake {
        border-radius: 50%;
        background-color: rgba(250.00000029802322, 232.00000137090683, 212.00000256299973, 1);
        width: 79.5px;
        height: 79.5px;
        position: absolute;
        left: 9px; /* Adjust according to your preference */
        top: 15px; /* Adjust according to your preference */
        background-image: url(https://kakeybakerystorage.blob.core.windows.net/itemcontainer/muffin.png);
        background-repeat: no-repeat;
        background-position: center;
    }

    .Slidecake {
        border-radius: 50%;
        background-color: rgba(250.00000029802322, 232.00000137090683, 212.00000256299973, 1);
        width: 79.5px;
        height: 79.5px;
        position: absolute;
        left: 9px; /* Adjust according to your preference */
        top: 15px; /* Adjust according to your preference */
        background-image: url(https://kakeybakerystorage.blob.core.windows.net/itemcontainer/cake-slice.png);
        background-repeat: no-repeat;
        background-position: center;
    }

    .Donut {
        border-radius: 50%;
        background-color: rgba(250.00000029802322, 232.00000137090683, 212.00000256299973, 1);
        width: 79.5px;
        height: 79.5px;
        position: absolute;
        left: 9px; /* Adjust according to your preference */
        top: 15px; /* Adjust according to your preference */
        background-image: url(https://kakeybakerystorage.blob.core.windows.net/itemcontainer/donut.png);
        background-repeat: no-repeat;
        background-position: center;
    }

    .Cookie {
        border-radius: 50%;
        background-color: rgba(250.00000029802322, 232.00000137090683, 212.00000256299973, 1);
        width: 79.5px;
        height: 79.5px;
        position: absolute;
        left: 9px; /* Adjust according to your preference */
        top: 15px; /* Adjust according to your preference */
        background-image: url(https://kakeybakerystorage.blob.core.windows.net/itemcontainer/cookies.png);
        background-repeat: no-repeat;
        background-position: center;
    }

    .btn:hover {
        background-color: #ddd;
    }

    .btn.active {
        background-color: rgba(236, 158, 73, 1);
        color: white;
    }

    .ImageContainer {
        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
        width: 123px;
        height: 136.61289978027344px;
        position: absolute;
        left: 29px;
        top: 0px;
        background-image: url(https://kakeybakerystorage.blob.core.windows.net/itemcontainer/ChocolateCake);
        background-repeat: no-repeat;
        background-size: cover;
    }
</style>