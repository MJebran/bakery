@page "/menuContents"
@using Bakery.ClassLibrary.Services;
@using Bakery.WebApp.Data;
@using Bakery.WebApp.Services
@inject IItemTypeService _itemservice;
@inject ICategoryService _categoryservice;
@inject ISizeService _sizeservice;
@inject IBlobStorageService _blobService;
@rendermode InteractiveServer

<div class="Container">
    <div class="locationContainer">
        <div class="location"></div>
        <span class="locationText">Manti, Utah</span>
    </div>

    <div class="frame">
        Frame
    </div>

    <div class="searchBar">
        <div class="InputContainer">
            <input placeholder="Search.." id="input" class="input" name="text" type="text">
        </div>
    </div>


    <div class="categories">
        <!-- Control buttons -->
        <div id="myBtnContainer">
            <button class="btn btn-primary" @onclick="() => FilterSelection()">
                Show all
            </button>
            @foreach (var category in categories)
            {
                <button class="btn" @onclick="() => FilterSelection(category.CategoryName)">
                    @category.CategoryName
                    <div class="@category.CategoryName"></div>
                </button>
            }
        </div>

        <!-- The filterable elements -->
        <div class="container">
            @foreach (var item in filterItems)
            {
                <div class="filterDiv @item.CategoryId">
                    @item.ItemName
                    <div class="purpleFrameItem"></div>
                </div>
            }
        </div>
    </div>
    
</div>




@code {
    List<Size> sizes = new();
    List<Category> categories = new();
    List<Itemtype> items = new();
    List<Itemtype> filterItems = new();
    protected override async Task OnInitializedAsync()
    {
        sizes = (await _sizeservice.GetAllSizes()).ToList<Size>();
        categories = (await _categoryservice.GetAllCategories()).ToList<Category>();
        items = (await _itemservice.GetAllItemtypes()).ToList<Itemtype>();
        FilterSelection();
    }

    private void FilterSelection(string category = "all")
    {
        if(category == "all")
        {
            filterItems = items;
        }
        else
        {
            filterItems = items.Where(item => item.Category.CategoryName == category).ToList();
        }
    }
}

